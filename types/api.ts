/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/{teamId}/activities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 체험 리스트 조회 */
    get: operations['FindActivity'];
    put?: never;
    /** 체험 등록 */
    post: operations['CreateActivity'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/activities/{activityId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 체험 상세 조회 */
    get: operations['GetById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/activities/{activityId}/available-schedule': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 체험 예약 가능일 조회 */
    get: operations['FindAvailableSchedule'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/activities/{activityId}/reviews': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 체험 리뷰 조회 */
    get: operations['FindReviews'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/activities/{activityId}/reservations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 체험 예약 신청 */
    post: operations['CreatReservation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/activities/image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 체험 이미지 url 생성 */
    post: operations['UploadActivityImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그인 */
    post: operations['Login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/auth/tokens': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 토큰 재발급 */
    post: operations['Refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-activities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 체험 리스트 조회 */
    get: operations['FindByUserId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-activities/{activityId}/reservation-dashboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 체험 월별 예약 현황 조회 */
    get: operations['FindReservationsByMonth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-activities/{activityId}/reserved-schedule': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 체험 날짜별 예약 정보(신청, 승인, 거절)가 있는 스케줄 조회 */
    get: operations['FindReservedSchedule'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-activities/{activityId}/reservations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 체험 예약 시간대별 예약 내역 조회 */
    get: operations['FindReservations'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-activities/{activityId}/reservations/{reservationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 내 체험 예약 상태(승인, 거절) 업데이트 */
    patch: operations['UpdateReservations'];
    trace?: never;
  };
  '/{teamId}/my-activities/{activityId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 내 체험 삭제 */
    delete: operations['Delete'];
    options?: never;
    head?: never;
    /** 내 체험 수정 */
    patch: operations['Update'];
    trace?: never;
  };
  '/{teamId}/my-notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 알림 리스트 조회 */
    get: operations['FindMyNotifications'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-notifications/{notificationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 내 알림 삭제 */
    delete: operations['Delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-reservations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 예약 리스트 조회 */
    get: operations['Find'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/my-reservations/{reservationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 내 예약 수정 (취소) */
    patch: operations['Update'];
    trace?: never;
  };
  '/{teamId}/my-reservations/{reservationId}/reviews': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 내 예약 리뷰 작성 */
    post: operations['CreateReview'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/oauth/apps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description 간편 로그인 App 등록/수정<br/>
     *     Google, Kakao 간편 로그인을 위한 App 을 등록하거나 수정합니다.<br/>
     *     이미 등록된 앱이 있을 경우 덮어씌워집니다.
     *
     *     요청 데이터 중 appKey 는 각 서비스에서 발급받은 인증 키 입니다.<br/>
     *     Google 의 경우에는 <b>"클라이언트 id"</b> 입니다.<br/>
     *     Kakao 의 경우에는 <b>"REST API 키"</b> 입니다.<br/>
     *     실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키를 등록해서는 안됩니다. */
    post: operations['UpsertOauthApp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/oauth/sign-up/{provider}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 간편 회원가입 */
    post: operations['SignUpOauth'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/oauth/sign-in/{provider}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 간편 로그인 */
    post: operations['SignInOauth'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회원가입 */
    post: operations['Create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{teamId}/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 정보 조회 */
    get: operations['GetMyInfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 내 정보 수정 */
    patch: operations['UpdateMyInfo'];
    trace?: never;
  };
  '/{teamId}/users/me/image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 프로필 이미지 url 생성 */
    post: operations['UploadProfileImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ActivityBasicDto: {
      /** Format: double */
      id: number;
      /** Format: double */
      userId: number;
      title: string;
      description: string;
      category: string;
      /** Format: double */
      price: number;
      address: string;
      bannerImageUrl: string;
      /** Format: double */
      rating: number;
      /** Format: double */
      reviewCount: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    ErrorResponsePayload: {
      message: string;
    };
    /** @enum {string} */
    Method: 'offset' | 'cursor';
    /** @enum {string} */
    Category: '문화 · 예술' | '식음료' | '스포츠' | '투어' | '관광' | '웰빙';
    /** @enum {string} */
    Sort: 'most_reviewed' | 'price_asc' | 'price_desc' | 'latest';
    FindActivitiesQueryDto: {
      method: components['schemas']['Method'];
      /** Format: double */
      cursorId?: number;
      category?: components['schemas']['Category'];
      keyword?: string;
      sort?: components['schemas']['Sort'];
      /**
       * Format: double
       * @default 1
       */
      page: number;
      /**
       * Format: double
       * @default 20
       */
      size: number;
    };
    /** @example {
     *       "id": 7,
     *       "userId": 21,
     *       "title": "함께 배우면 즐거운 스트릿댄스",
     *       "description": "둠칫 둠칫 두둠칫",
     *       "category": "투어",
     *       "price": 10000,
     *       "address": "서울특별시 강남구 테헤란로 427",
     *       "bannerImageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/a.png",
     *       "subImages": [
     *         {
     *           "id": 1,
     *           "imageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/b.png"
     *         }
     *       ],
     *       "schedules": [
     *         {
     *           "id": 1,
     *           "date": "2023-12-01",
     *           "startTime": "12:00",
     *           "endTime": "13:00"
     *         },
     *         {
     *           "id": 2,
     *           "date": "2023-12-05",
     *           "startTime": "12:00",
     *           "endTime": "13:00"
     *         }
     *       ],
     *       "reviewCount": 5,
     *       "rating": 4.74,
     *       "createdAt": "2023-12-31T21:28:50.589Z",
     *       "updatedAt": "2023-12-31T21:28:50.589Z"
     *     } */
    ActivityWithSubImagesAndSchedulesDto: {
      /** Format: double */
      id: number;
      /** Format: double */
      userId: number;
      title: string;
      description: string;
      category: string;
      /** Format: double */
      price: number;
      address: string;
      bannerImageUrl: string;
      /** Format: double */
      rating: number;
      /** Format: double */
      reviewCount: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      subImages: {
        imageUrl: string;
        /** Format: double */
        id: number;
      }[];
      schedules: {
        endTime: string;
        startTime: string;
        date: string;
        /** Format: double */
        id: number;
      }[];
    };
    ScheduleResponseDto: {
      date: string;
      times: {
        endTime: string;
        startTime: string;
        /** Format: double */
        id: number;
      }[];
    };
    FindAvailableScheduleQueryDto: {
      /** @example 2024 */
      year: string;
      /** @example 01 */
      month: string;
    };
    ReviewServiceResponseDto: {
      /** Format: double */
      id: number;
      user: {
        profileImageUrl: string | null;
        nickname: string;
        /** Format: double */
        id: number;
      };
      /** Format: double */
      activityId: number;
      /** Format: double */
      rating: number;
      content: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindReviewsQueryDto: {
      /**
       * Format: double
       * @default 1
       */
      page: number;
      /**
       * Format: double
       * @default 3
       */
      size: number;
    };
    ActivityWithSchedulesResponseDto: {
      /** Format: double */
      id: number;
      /** Format: double */
      userId: number;
      title: string;
      description: string;
      category: string;
      /** Format: double */
      price: number;
      address: string;
      bannerImageUrl: string;
      /** Format: double */
      rating: number;
      /** Format: double */
      reviewCount: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      subImages: {
        imageUrl: string;
        /** Format: double */
        id: number;
      }[];
      schedules: {
        times: {
          endTime: string;
          startTime: string;
          /** Format: double */
          id: number;
        }[];
        date: string;
      }[];
    };
    CreateScheduleBody: {
      date: string;
      startTime: string;
      endTime: string;
    };
    /** @example {
     *       "title": "함께 배우면 즐거운 스트릿댄스",
     *       "category": "투어",
     *       "description": "둠칫 둠칫 두둠칫",
     *       "address": "서울특별시 강남구 테헤란로 427",
     *       "price": 10000,
     *       "schedules": [
     *         {
     *           "date": "2023-12-01",
     *           "startTime": "12:00",
     *           "endTime": "13:00"
     *         },
     *         {
     *           "date": "2023-12-05",
     *           "startTime": "12:00",
     *           "endTime": "13:00"
     *         },
     *         {
     *           "date": "2023-12-05",
     *           "startTime": "13:00",
     *           "endTime": "14:00"
     *         },
     *         {
     *           "date": "2023-12-05",
     *           "startTime": "14:00",
     *           "endTime": "15:00"
     *         }
     *       ],
     *       "bannerImageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/a.png",
     *       "subImageUrls": [
     *         "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/b.png"
     *       ]
     *     } */
    CreateActivityBodyDto: {
      title: string;
      category: string;
      description: string;
      /** Format: double */
      price: number;
      address: string;
      /** @default [] */
      schedules: components['schemas']['CreateScheduleBody'][];
      bannerImageUrl: string;
      /** @default [] */
      subImageUrls: string[];
    };
    /** @enum {string} */
    ReservationStatus: 'pending' | 'confirmed' | 'declined' | 'canceled' | 'completed';
    ReservationResponseDto: {
      /** Format: double */
      id: number;
      teamId: string;
      /** Format: double */
      userId: number;
      /** Format: double */
      activityId: number;
      /** Format: double */
      scheduleId: number;
      status: components['schemas']['ReservationStatus'];
      reviewSubmitted: boolean;
      /** Format: double */
      totalPrice: number;
      /** Format: double */
      headCount: number;
      date: string;
      startTime: string;
      endTime: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateReservationBodyDto: {
      /** Format: double */
      scheduleId: number;
      /** Format: double */
      headCount: number;
    };
    UserServiceResponseDto: {
      /** Format: double */
      id: number;
      email: string;
      nickname: string;
      profileImageUrl: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    LoginBodyDto: {
      email: string;
      password: string;
    };
    FindMyActivitiesQueryDto: {
      /** Format: double */
      cursorId?: number;
      /**
       * Format: double
       * @default 20
       */
      size: number;
    };
    /** @example {
     *       "date": "2024-01-09",
     *       "reservations": {
     *         "completed": 1,
     *         "confirmed": 0,
     *         "pending": 1
     *       }
     *     } */
    FindReservationsByMonthResponseDto: {
      date: string;
      reservations: {
        /** Format: double */
        pending: number;
        /** Format: double */
        confirmed: number;
        /** Format: double */
        completed: number;
      };
    };
    FindReservationsByMonthQueryDto: {
      /** @example 2024 */
      year: string;
      /** @example 01 */
      month: string;
    };
    ReservedScheduleResponseDto: {
      /** Format: double */
      scheduleId: number;
      startTime: string;
      endTime: string;
      count: {
        /** Format: double */
        declined: number;
        /** Format: double */
        confirmed: number;
        /** Format: double */
        pending: number;
      };
    };
    FindReservedScheduleQueryDto: {
      date: string;
    };
    /** @enum {string} */
    StatusEnum: 'pending' | 'canceled' | 'confirmed' | 'declined';
    Status: components['schemas']['StatusEnum'];
    ReservationWithUserResponseDto: {
      /** Format: double */
      id: number;
      nickname: string;
      /** Format: double */
      userId: number;
      teamId: string;
      /** Format: double */
      activityId: number;
      /** Format: double */
      scheduleId: number;
      status: components['schemas']['Status'];
      reviewSubmitted: boolean;
      /** Format: double */
      totalPrice: number;
      /** Format: double */
      headCount: number;
      date: string;
      startTime: string;
      endTime: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindReservationsQueryDto: {
      /** Format: double */
      cursorId?: number;
      /**
       * Format: double
       * @default 10
       */
      size: number;
      /** Format: double */
      scheduleId: number;
      /** @enum {string} */
      status: 'declined' | 'pending' | 'confirmed';
    };
    UpdateMyActivityReservationBodyDto: {
      /** @enum {string} */
      status: 'declined' | 'confirmed';
    };
    UpdateMyActivityBodyDto: {
      title?: string;
      category?: components['schemas']['Category'];
      description?: string;
      /** Format: double */
      price?: number;
      address?: string;
      bannerImageUrl?: string;
      /** @default [] */
      subImageIdsToRemove: number[];
      /** @default [] */
      subImageUrlsToAdd: string[];
      /** @default [] */
      scheduleIdsToRemove: number[];
      /** @default [] */
      schedulesToAdd: components['schemas']['CreateScheduleBody'][];
    };
    NotificationDto: {
      /** Format: double */
      id: number;
      teamId: string;
      /** Format: double */
      userId: number;
      content: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt: string | null;
    };
    FindMyNotificationsQueryDto: {
      /** Format: double */
      cursorId?: number;
      /**
       * Format: double
       * @default 10
       */
      size: number;
    };
    ReservationWithActivityResponseDto: {
      /** Format: double */
      id: number;
      teamId: string;
      /** Format: double */
      userId: number;
      activity: {
        bannerImageUrl: string;
        title: string;
        /** Format: double */
        id: number;
      };
      /** Format: double */
      scheduleId: number;
      status: components['schemas']['ReservationStatus'];
      reviewSubmitted: boolean;
      /** Format: double */
      totalPrice: number;
      /** Format: double */
      headCount: number;
      date: string;
      startTime: string;
      endTime: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindMyReservationsQueryDto: {
      /** Format: double */
      cursorId?: number;
      /**
       * Format: double
       * @default 10
       */
      size: number;
      status?: components['schemas']['ReservationStatus'];
    };
    UpdateMyReservationBodyDto: {
      /** @enum {string} */
      status: 'canceled';
    };
    CreateReviewBodyDto: {
      /** Format: double */
      rating: number;
      content: string;
    };
    OauthApp: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      appKey: string;
      provider: string;
      teamId: string;
      /** Format: double */
      id: number;
    };
    /** @enum {string} */
    OauthProvider: 'google' | 'kakao';
    UpsertOauthAppRequestBody: {
      /** @description 간편 로그인을 위한 인증 키 입니다.
       *     Google 의 경우에는 "클라이언트 id" 입니다.
       *     Kakao 의 경우에는 "REST API 키" 입니다.
       *     실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키는 등록하시면 안됩니다. */
      appKey: string;
      provider: components['schemas']['OauthProvider'];
    };
    /** @description 간편 로그인 과정을 통해 발급받은 토큰입니다.<br />
     *     Google 의 경우에는 <b>Google Id 토큰</b>(JWT) 입니다.<br/>
     *     Kakao 의 경우에는 <b>인가 코드</b> 입니다. */
    OauthToken: string;
    SignInWithOauthRequestBody: {
      /**
       * @description Kakao 의 경우에는 필수입니다.<br/>
       *     인가 코드를 얻을 때 사용하였던 redirect_uri 값을 그대로 사용합니다.
       * @example http://localhost:3000/oauth/kakao
       */
      redirectUri?: string;
      token: components['schemas']['OauthToken'];
    };
    SignUpWithOauthRequestBody: {
      nickname: string;
    } & components['schemas']['SignInWithOauthRequestBody'];
    CreateUserBodyDto: {
      email: string;
      nickname: string;
      password: string;
    };
    UpdateUserBodyDto: {
      nickname?: string;
      profileImageUrl?: string | null;
      newPassword?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  FindActivity: {
    parameters: {
      query: {
        method: components['schemas']['Method'];
        cursorId?: number;
        category?: components['schemas']['Category'];
        keyword?: string;
        sort?: components['schemas']['Sort'];
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            cursorId?: number | null;
            /** Format: double */
            totalCount: number;
            activities: components['schemas']['ActivityBasicDto'][];
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  CreateActivity: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivityBodyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActivityWithSchedulesResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description ConflictException */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  GetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActivityWithSubImagesAndSchedulesDto'];
        };
      };
      /** @description BadRequest */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindAvailableSchedule: {
    parameters: {
      query: {
        /** @example 2024 */
        year: string;
        /** @example 01 */
        month: string;
      };
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ScheduleResponseDto'][];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description BadRequest */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindReviews: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            averageRating: number;
            /** Format: double */
            totalCount: number;
            reviews: components['schemas']['ReviewServiceResponseDto'][];
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description BadRequest */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  CreatReservation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReservationBodyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReservationResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description ConflictException */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  UploadActivityImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            activityImageUrl: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Login: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginBodyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            user: components['schemas']['UserServiceResponseDto'];
            refreshToken: string;
            accessToken: string;
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFoundException */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Refresh: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            refreshToken: string;
            accessToken: string;
          };
        };
      };
    };
  };
  FindByUserId: {
    parameters: {
      query?: {
        cursorId?: number;
        size?: number;
      };
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            cursorId: number | null;
            /** Format: double */
            totalCount: number;
            activities: components['schemas']['ActivityBasicDto'][];
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindReservationsByMonth: {
    parameters: {
      query: {
        /** @example 2024 */
        year: string;
        /** @example 01 */
        month: string;
      };
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindReservationsByMonthResponseDto'][];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindReservedSchedule: {
    parameters: {
      query: {
        date: string;
      };
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReservedScheduleResponseDto'][];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindReservations: {
    parameters: {
      query: {
        cursorId?: number;
        size?: number;
        scheduleId: number;
        status: 'declined' | 'pending' | 'confirmed';
      };
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            cursorId: number | null;
            /** Format: double */
            totalCount: number;
            reservations: components['schemas']['ReservationWithUserResponseDto'][];
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  UpdateReservations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        activityId: number;
        reservationId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMyActivityReservationBodyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReservationResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        activityId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMyActivityBodyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActivityWithSchedulesResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description ConflictException */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  FindMyNotifications: {
    parameters: {
      query?: {
        cursorId?: number;
        size?: number;
      };
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            cursorId: number | null;
            notifications: components['schemas']['NotificationDto'][];
            /** Format: double */
            totalCount: number;
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        notificationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Find: {
    parameters: {
      query?: {
        cursorId?: number;
        size?: number;
        status?: components['schemas']['ReservationStatus'];
      };
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: double */
            cursorId: number | null;
            reservations: components['schemas']['ReservationWithActivityResponseDto'][];
            /** Format: double */
            totalCount: number;
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  Update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        reservationId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMyReservationBodyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReservationResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  CreateReview: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        reservationId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReviewBodyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** Format: date-time */
            deletedAt: string | null;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            createdAt: string;
            content: string;
            /** Format: double */
            rating: number;
            /** Format: double */
            userId: number;
            /** Format: double */
            activityId: number;
            teamId: string;
            /** Format: double */
            id: number;
          };
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFound */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  UpsertOauthApp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertOauthAppRequestBody'];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OauthApp'];
        };
      };
    };
  };
  SignUpOauth: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        provider: components['schemas']['OauthProvider'];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpWithOauthRequestBody'];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            user: components['schemas']['UserServiceResponseDto'];
            refreshToken: string;
            accessToken: string;
          };
        };
      };
    };
  };
  SignInOauth: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
        provider: components['schemas']['OauthProvider'];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInWithOauthRequestBody'];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            user: components['schemas']['UserServiceResponseDto'];
            refreshToken: string;
            accessToken: string;
          };
        };
      };
    };
  };
  Create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserBodyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserServiceResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description ConflictException */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  GetMyInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserServiceResponseDto'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description NotFoundException */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  UpdateMyInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserBodyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserServiceResponseDto'];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
  UploadProfileImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teamId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            profileImageUrl: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponsePayload'];
        };
      };
    };
  };
}
